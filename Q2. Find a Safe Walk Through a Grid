#include <vector>
#include <queue>
using namespace std;

class Solution {
public:
    int r, c;
    int row[4] = {1, -1, 0, 0};
    int col[4] = {0, 0, 1, -1};

    bool valid(int i, int j) {
        return i >= 0 && i < r && j >= 0 && j < c;
    }

    bool findSafeWalk(vector<vector<int>>& grid, int health) {
        r = grid.size();
        c = grid[0].size();

        queue<pair<pair<int, int>, int>> q;
        vector<vector<int>> visited(r, vector<int>(c, -1));

        q.push({{0, 0}, health - grid[0][0]});
        visited[0][0] = health - grid[0][0];

        while (!q.empty()) {
            auto [current, h] = q.front();
            q.pop();
            int ni = current.first;
            int nj = current.second;

            if (ni == r - 1 && nj == c - 1 && h > 0) {
                return true;
            }

            for (int k = 0; k < 4; k++) {
                int new_ni = ni + row[k];
                int new_nj = nj + col[k];

                if (valid(new_ni, new_nj)) {
                    int nh = h - grid[new_ni][new_nj];

                    if (nh > 0 && nh > visited[new_ni][new_nj]) {
                        visited[new_ni][new_nj] = nh;
                        q.push({{new_ni, new_nj}, nh});
                    }
                }
            }
        }

        return false;
    }
};
